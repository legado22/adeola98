helm upgrade zonedependency zone/zonedependency --version 1.0.71 -f dependency-values.yaml

This command will clear all evicted pods
kubectl get pods --all-namespaces | awk '$4=="Evicted" {print "kubectl delete pod --namespace=" $1 " " $2}' | sh

To scale a deployment
k scale deployment journalserializer -n zone-cardreconciliation-ns --replicas=0
zone-cardreconciliation-ns      journalserializer

K get deploy -A

to edit a config map
k edit cm -n zone-cardreconciliation-ns journalserializer-config

To list all cm
k get cm -A

To describe a cm of a deployment
k describe cm -n zone-cardreconciliation-ns journalserializer

To edit a deployment
k edit deployment journalserializer -n zone-cardreconciliation-ns

To restart a pod

k delete pod -n zone-cardreconciliation-ns      journalserializer-5bfbbcf8fd-f5ng5

================================================================================
To Install kubernetes

First, It is required to install Docker

sudo apt update
apt install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
apt update
apt install -y docker-ce
systemctl start docker
systemctl enable docker
usermod -aG docker $USER
docker --version

THEN:
Install K8s
sudo apt-get update
cat <<EOF | sudo tee /etc/modules-load.d/k8s.conf
overlay
br_netfilter
EOF

sudo modprobe overlay
sudo modprobe br_netfilter

cat <<EOF | sudo tee /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
net.ipv4.ip_forward = 1
EOF

sudo sysctl --system

# Verify modules and sysctl params
lsmod | grep br_netfilter
lsmod | grep overlay
sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward

# Step 2: Disable Swap
echo "Disabling swap"
sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
sudo swapoff -a
sudo modprobe overlay
sudo modprobe br_netfilter
sudo apt-get install -y apt-transport-https ca-certificates curl
sudo mkdir -p -m 755 /etc/apt/keyrings
echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update

[[ubeadm join 192.168.80.129:6443 --token b5ztie.iyqaio652jwvm2zy \
	--discovery-token-ca-cert-hash sha256:63c2b97ef08104f54dc729f0e13e59dda737a41c30a1e39034a36085222aa965 ]]

kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml


If you encounter any error here use the command to check the logs:
journalctl -u kubelet:

=========
To remove all k8s 
sudo apt-get remove --purge kubelet kubeadm kubectl kubernetes-cni
sudo apt-get purge -y kubelet kubeadm kubectl kubernetes-cni
sudo rm -rf /etc/kubernetes
sudo rm /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update

=========

sudo kubeadm init

If you encounter an error below like this?
journalctl -u kubelet -- Logs begin at Wed 2023-12-06 03:20:07 PST, end at Fri 2024-02-23 08:17:46 PST. -- Feb 23 08:10:57 ubuntu systemd[1]: Started kubelet: The Kubernetes Node Agent. Feb 23 08:10:57 ubuntu systemd[1]: kubelet.service: Current command vanished from the unit file, execution of the command list won't be resumed. Feb 23 08:10:58 ubuntu systemd[1]: Stopping kubelet: The Kubernetes Node Agent... Feb 23 08:10:58 ubuntu systemd[1]: kubelet.service: Succeeded. Feb 23 08:10:58 ubuntu systemd[1]: Stopped kubelet: The Kubernetes Node Agent. Feb 23 08:10:58 ubuntu systemd[1]: Started kubelet: The Kubernetes Node Agent. Feb 23 08:10:58 ubuntu kubelet[4736]: E0223 08:10:58.803843 4736 run.go:74] "command failed" err="failed to load kubelet config file, path: /var/lib/kubelet/config.yaml, error: failed to load Kubelet> Feb 23 08:10:58 ubuntu systemd[1]: kubelet.service: Main process exited, code=exited, status=1/FAILURE Feb 23 08:10:58 ubuntu systemd[1]: kubelet.service: Failed with result 'exit-code'.

Run this:
Ensure that your var/lib/kubelet/config.yaml exist or populate it with this:
"apiVersion: kubelet.config.k8s.io/v1beta1kubectl get pods
No resources found in default namespace.
kind: KubeletConfiguration
clusterDNS:
- 10.96.0.10"

If problem persist?
vim /etc/containerd/config.toml and comment out  
disabled_plugins = ["cri"]

After that, please ensure you copy the token to join the cluster.
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

===============================================================

==============================================================

Kubernetes Architecture

1. 𝗰𝗹𝗼𝘂𝗱-𝗰𝗼𝗻𝘁𝗿𝗼𝗹𝗹𝗲𝗿-𝗺𝗮𝗻𝗮𝗴𝗲𝗿: Links your cluster with the cloud provider API which enables cloud providers to release features at a different pace as compared to the main k8s project. It is also responsible for Node, Route and Service Controller.

2. 𝗲𝘁𝗰𝗱: It is a Multiversion Consistent Immutable Key-Value store for storing cluster data(config, state, metadata) which uses gRPC for its messaging protocol.

Only the API server has the privileges to connect to etcd, the rest of the components need to go through the API server for any state retrieval.

3. 𝗸𝘂𝗯𝗲-𝗮𝗽𝗶-𝘀𝗲𝗿𝘃𝗲𝗿: This is the most lazy component of k8s. The main function is to process the API calls. It is designed to scale horizontally.

4. 𝗸𝘂𝗯𝗲-𝘀𝗰𝗵𝗲𝗱𝘂𝗹𝗲𝗿: It watches for schedulable resources and binds them to nodes based on the resource availability by taking multiple factors into account like taints, tolerations, and node affinity.

5. 𝗸𝘂𝗯𝗲-𝗰𝗼𝗻𝘁𝗿𝗼𝗹𝗹𝗲𝗿-𝗺𝗮𝗻𝗮𝗴𝗲𝗿: It implements the core control loops through which it watches for any changes and does the necessary changes. Takes care of garbage collection, and namespace life cycle.

6. 𝗸𝘂𝗯𝗲𝗹𝗲𝘁: Makes sure that the containers are running in a healthy state and manages the node’s resources.

7. 𝗸𝘂𝗯𝗲-𝗽𝗿𝗼𝘅𝘆: It is responsible for all the underlying network configuration on nodes. Example: Service to Pod IP Translation.

8. 𝗖𝗥𝗜: Container Runtime Interface manages the life cycle of containers/images and enables the working of containers on k8s.

9. 𝗣𝗼𝗱𝘀: They are a bunch of processes running till completion. I call them FTC(Functions till completion)

================================================================

Connecting a K8 cluster to your Gitlab Repo

First install Helm

curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
chmod 700 get_helm.sh
./get_helm.sh
helm version

Second:
helm repo add gitlab https://charts.gitlab.io/
helm repo update
helm install gitlab-runner gitlab/gitlab-runner \
  --set gitlabUrl=<GITLAB_URL> \
  --set runnerRegistrationToken=<REGISTRATION_TOKEN> \
  --set runners.image=<RUNNER_IMAGE> \
  --set runners.privileged=true

=================















